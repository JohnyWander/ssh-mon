v1.0.0 -added processor monitoring
v1.0.1 -added RAM monitoring(almost)
v1.0.2 -fixed multi server processor monitoring - Queing Console.SetCursorPosition/write
v1.0.3 -Turned off console quick edit mode - app freezing when clicking on console window fixed
v1.0.4 -Ram monitoring works / changed defauklt namespace to program name from random mess

v1.1.0 - 
-Now you can use only one single private key for all servers, as SSH.NET's "ConnectionInfo" 
class isn't "Thread safe" - authentication errors, weird stuff happening,
(Key, and server config files ENCRYPTION with AES is coming soon to maximize safety)

-Slowed down timers from 1000 to 2000ms to lower chance of Console.SetCursorPosition and GetCursorPosition
messing GUI up
- Wrapped CPU and ram status edit functions in Task.Run(()=> ..).Wait() to lower "mess up" chance almost to 0
- Added functionality to reset gui, if somehow gui still gets messed up


v1.2.0 - Added possibility to encrypt "servers" folder with AES
v1.2.1 - Added possibility to decrypt server files "in air" during serverlist building
v1.2.2 - Started work with Custom Tests in separate .dll

v1.3.0 -
- Added posibility to use custom .dll as "modules" to process output from ssh server. Then "module"
can indicate if status should change to error with custom error code. To See how module dll should look and work see "Examples folder"
- Made cpu/ram data update timer configurable, please note that values below "1000ms" are NOT good idea
v1.3.1-
-Fixed bug- bad password during decryption caused data to disappear
-Fixed using custom ports
-Finally made some Readme
-Created folder for examples

v1.3.2-
- some "Unspaghettification" of the code - Program.cs

v1.3.3 - even more unspaghettification
-Fixed bug causing module status update mess up the gui
-Fixed bug causing program to crash after entering the password during "in-air" decryption


v1.3.4
-added possibility to run specified command when test form custom module fails

v1.4.0
-Thread safety - Implemented GUI task queue with System.Threading.Channels - asynchronously writing Action delegates 
to channel. Then separate Task runs them as they appear in channel.
Therefore setting timer below 1000ms is good idea now!(Please keep some rationality :)) As gui won't mess up now  (!!! please note that the lower timer dela gets
the higher gets cpu usage!
-Removed module functionality for now it was too buggy in it's main form
-Fixed bug where sometimes gui started before connections were established and caused app to crash - Gui starts with set{} property as connections are established




